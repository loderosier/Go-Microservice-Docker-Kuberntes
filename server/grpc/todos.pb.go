// Code generated by protoc-gen-go. DO NOT EDIT.
// source: todos.proto

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	todos.proto

It has these top-level messages:
	Request
	Response
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type Response struct {
	Todos []*Response_Todo `protobuf:"bytes,1,rep,name=todos" json:"todos,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetTodos() []*Response_Todo {
	if m != nil {
		return m.Todos
	}
	return nil
}

type Response_Todo struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title    string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Tag      string `protobuf:"bytes,3,opt,name=tag" json:"tag,omitempty"`
	Priority int32  `protobuf:"varint,4,opt,name=priority" json:"priority,omitempty"`
}

func (m *Response_Todo) Reset()                    { *m = Response_Todo{} }
func (m *Response_Todo) String() string            { return proto.CompactTextString(m) }
func (*Response_Todo) ProtoMessage()               {}
func (*Response_Todo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Todo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Response_Todo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Response_Todo) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *Response_Todo) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func init() {
	proto.RegisterType((*Request)(nil), "grpc.Request")
	proto.RegisterType((*Response)(nil), "grpc.Response")
	proto.RegisterType((*Response_Todo)(nil), "grpc.Response.Todo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for Todos service

type TodosClient interface {
	GetTodos(ctx context.Context, in *Request, opts ...grpc1.CallOption) (*Response, error)
}

type todosClient struct {
	cc *grpc1.ClientConn
}

func NewTodosClient(cc *grpc1.ClientConn) TodosClient {
	return &todosClient{cc}
}

func (c *todosClient) GetTodos(ctx context.Context, in *Request, opts ...grpc1.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc1.Invoke(ctx, "/grpc.Todos/GetTodos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Todos service

type TodosServer interface {
	GetTodos(context.Context, *Request) (*Response, error)
}

func RegisterTodosServer(s *grpc1.Server, srv TodosServer) {
	s.RegisterService(&_Todos_serviceDesc, srv)
}

func _Todos_GetTodos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodosServer).GetTodos(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Todos/GetTodos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodosServer).GetTodos(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Todos_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.Todos",
	HandlerType: (*TodosServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "GetTodos",
			Handler:    _Todos_GetTodos_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "todos.proto",
}

func init() { proto.RegisterFile("todos.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xcb, 0x4a, 0xc4, 0x30,
	0x14, 0x86, 0x4d, 0x2f, 0x5a, 0x4f, 0xb1, 0x48, 0x74, 0x11, 0xba, 0xb1, 0x74, 0x55, 0x11, 0xb2,
	0xa8, 0xbe, 0x83, 0xfb, 0xe0, 0xca, 0x9d, 0x9a, 0x50, 0x82, 0x43, 0x4f, 0x26, 0x39, 0xb3, 0x98,
	0xc7, 0x98, 0x37, 0x1e, 0x92, 0xb6, 0x03, 0xb3, 0x3b, 0x5f, 0xf2, 0xf3, 0x5f, 0xa0, 0x26, 0xd4,
	0x18, 0xa4, 0xf3, 0x48, 0xc8, 0x8b, 0xc9, 0xbb, 0xbf, 0xfe, 0x05, 0xee, 0x94, 0xd9, 0x1f, 0x4c,
	0x20, 0xfe, 0x0c, 0x25, 0xe1, 0xbf, 0x99, 0x05, 0xeb, 0xd8, 0x70, 0xaf, 0x16, 0xe8, 0x4f, 0x0c,
	0x2a, 0x65, 0x82, 0xc3, 0x39, 0x18, 0xfe, 0x1a, 0x25, 0x1a, 0x83, 0x60, 0x5d, 0x3e, 0xd4, 0xe3,
	0x93, 0x8c, 0x1e, 0x72, 0xfb, 0x96, 0x5f, 0xa8, 0x51, 0x2d, 0x8a, 0xf6, 0x1b, 0x8a, 0x88, 0xbc,
	0x81, 0xcc, 0xea, 0xd5, 0x32, 0xb3, 0x3a, 0xa5, 0x58, 0xda, 0x19, 0x91, 0xad, 0x29, 0x11, 0xf8,
	0x23, 0xe4, 0xf4, 0x33, 0x89, 0x3c, 0xbd, 0xc5, 0x93, 0xb7, 0x50, 0x39, 0x6f, 0xd1, 0x5b, 0x3a,
	0x8a, 0xa2, 0x63, 0x43, 0xa9, 0x2e, 0x3c, 0x7e, 0x40, 0x19, 0xbd, 0x03, 0x7f, 0x83, 0xea, 0xd3,
	0xd0, 0x72, 0x3f, 0x6c, 0x65, 0xd2, 0x9a, 0xb6, 0xb9, 0xee, 0xd6, 0xdf, 0xfc, 0xde, 0xa6, 0xdd,
	0xef, 0xe7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x41, 0xf9, 0xcb, 0x08, 0x06, 0x01, 0x00, 0x00,
}
